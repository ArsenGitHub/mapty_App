'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

// –ö–ª–∞—Å—Å —Å–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –ø—Ä–∏–ª-—è
class App {
  #map;
  #mapEvent;
  #workouts = [];

  constructor() {
    // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é + _loadMap(–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã), —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç–µ.on + _showForm(–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã)
    this._getPosition();
    //  –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã, –æ—á–∏—â–∞–µ—Ç –∏–Ω–ø—É—Ç—ã, —Å—Ç–∞–≤–∏—Ç –º–∞—Ä–∫–µ—Ä—ã
    form.addEventListener('submit', this._newWorkout.bind(this));
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞ cadence –Ω–∞ elevation –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    inputType.addEventListener('change', this._toggleInputCadToElev);
    // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ä
    // –°–æ–±—ã—Ç–∏—è(–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ), –∫–ª–∏–∫ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
    containerWorkouts.addEventListener(
      'click',
      this._moveMapToMarker.bind(this)
    );
  }
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø—Ä–∏ —É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –≤—ã–∑-—Å—è –º–µ—Ç–æ–¥ _loadMap
  _getPosition() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert('Can not get your location');
        }
      );
    }
  }
  // –ü—Ä–æ–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã
  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    const myCoordinates = [latitude, longitude];
    // Leaflet API
    this.#map = L.map('map').setView(myCoordinates, 14);
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);
    // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º –∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç—É
    this.#map.on('click', this._showForm.bind(this));
  }
  //–°–º–µ—â–∞–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä–∫–µ—Ä
  _moveMapToMarker(e) {
    // –≠–ª–µ–º–µ–Ω—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ(–≤—Å–ª—ã–≤–∞–µ—Ç –¥–æ —Ä–æ–¥–∏—Ç–µ–ª—è)
    // –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è—é—â–∏—Å—è –¥–æ—á–µ—Ä–Ω–∏–º ul - —Ç.–µ. —Å–ø–∏—Å–æ–∫(–≤–µ—Å—å –±–ª–æ–∫ li, h2, span...) —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
    console.log(e.target);

    //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è html —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–ª–∞—Å—Å–æ–º .workout(li)
    const workoutListEl = e.target.closest('.workout');

    // –ó–∞—à–∏—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ(Guard Clause)
    if (!workoutListEl) return;

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—å–µ–∫—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ "–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º" –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏(–º–∞—Ä–∫–µ—Ä–∞)
    const markerCoord = this.#workouts.find(
      val => val.id === workoutListEl.dataset.id
    ).coords;

    //–°–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä–∫–µ—Ä(Leaflet API)
    this.#map.setView(markerCoord, 14, {
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      animation: true,
      pan: {
        duration: 1,
      },
    });
  }
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É, –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ mapEvent
  _showForm(mapE) {
    this.#mapEvent = mapE;
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  _hideForm() {
    form.style.display = 'none';
    form.classList.add('hidden');
    setTimeout(() => (form.style.display = 'grid'), 1000);
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞ cadence –Ω–∞ elevation –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
  _toggleInputCadToElev() {
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
  }

  // –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—å–µ–∫—Ç —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –∏ —Å—Ç–∞–≤–∏—Ç –º–∞—Ä–∫–µ—Ä
  _newWorkout(e) {
    e.preventDefault();
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–ø—É—Ç–æ–≤
    const checkValid = (...arg) => {
      return arg.every(val => val > 0);
    };
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ —á/–∑ mapEvent Leafleat
    const { lat, lng } = this.#mapEvent.latlng;
    const clickCoordinates = [lat, lng];
    // –î–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–ø—É—Ç–æ–≤ —Ñ–æ—Ä–º—ã
    const typeVal = inputType.value;
    const distanceVal = +inputDistance.value;
    const durationVal = +inputDuration.value;
    const cadenceOrElevatVal =
      typeVal === 'running' ? +inputCadence.value : +inputElevation.value;
    if (!checkValid(distanceVal, durationVal, cadenceOrElevatVal))
      return alert('All inputs must be filled in and be greater than 0');
    // –°–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç(—ç–∫–∑–µ–º–ø–ª—è—Ä) —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
    const workout =
      typeVal === 'running'
        ? new Running(
            distanceVal,
            durationVal,
            clickCoordinates,
            cadenceOrElevatVal
          )
        : new Cycling(
            distanceVal,
            durationVal,
            clickCoordinates,
            cadenceOrElevatVal
          );

    // –ú–∞—Å—Å–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–Ω—è–º–∏
    this.#workouts.push(workout);
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å –ø–æ–ø–∞–ø–æ–º
    this._renderWorkoutMarker(workout);
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    this._renderWorkoutList(workout);
    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    this._hideForm();
  }

  //–°–æ–∑–¥–∞–µ—Ç –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
  _renderWorkoutMarker(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          autoClose: false,
          closeOnClick: false,
          maxWidth: 250,
          maxHeight: 100,
          className: `${inputType.value}-popup`,
          content: `<p>${inputType.value === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${
            workout.description
          }</p>`,
        })
      )
      .openPopup();
  }

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ç—Ä–µ–Ω—è–º–∏
  _renderWorkoutList(workout) {
    let html = `
      <li class="workout workout--${inputType.value}" data-id="${workout.id}">
            <h2 class="workout__title">${workout.description}</h2>
            <div class="workout__details">
              <span class="workout__icon">${
                inputType.value === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'
              }</span>
              <span class="workout__value">${workout.distance}</span>
              <span class="workout__unit">km</span>
            </div>
            <div class="workout__details">
              <span class="workout__icon">‚è±</span>
              <span class="workout__value">${workout.duration}</span>
              <span class="workout__unit">min</span>
            </div>
          `;
    // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
    if (inputType.value === 'running') {
      html += `
        <div class="workout__details">
          <span class="workout__icon">‚ö°Ô∏è</span>
          <span class="workout__value">${workout.pace.toFixed(1)}</span>
          <span class="workout__unit">min/km</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">ü¶∂üèº</span>
          <span class="workout__value">${workout.cadence}</span>
          <span class="workout__unit">spm</span>
        </div>
      </li>
      `;
    }
    if (inputType.value === 'cycling') {
      html += `
        <div class="workout__details">
          <span class="workout__icon">‚ö°Ô∏è</span>
          <span class="workout__value">${workout.speed.toFixed(1)}</span>
          <span class="workout__unit">km/h</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">‚õ∞</span>
          <span class="workout__value">${workout.elevationGain}</span>
          <span class="workout__unit">m</span>
        </div>
      </li>
      `;
    }
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–æ—Å–µ–¥–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º—ã —Å–Ω–∏–∑—É
    form.insertAdjacentHTML('afterend', html);
  }
}

// –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10);

  constructor(distance, duration, coords) {
    this.distance = distance;
    this.duration = duration;
    this.coords = coords; // [lat, lng]
    this._setDescription();
  }

  // –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤-–≤–æ, —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    this.description = `${
      inputType.value[0].toUpperCase() + inputType.value.slice(1)
    } on the ${this.date.getDate()} of ${months[this.date.getMonth()]}`;
  }
}

class Running extends Workout {
  constructor(distance, duration, coords, cadence) {
    super(distance, duration, coords);
    this.cadence = cadence;
    this.calcPace();
  }
  // –ú–∏–Ω/–º–µ—Ç—Ä
  calcPace() {
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

class Cycling extends Workout {
  constructor(distance, duration, coords, elevationGain) {
    super(distance, duration, coords);
    this.elevationGain = elevationGain;
    this.calcSpeed();
  }
  // –°–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
  calcSpeed() {
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ App, —á—Ç–æ–±—ã constructor –≤—ã–∑—ã–≤–∞–ª—Å—è
const app = new App();
